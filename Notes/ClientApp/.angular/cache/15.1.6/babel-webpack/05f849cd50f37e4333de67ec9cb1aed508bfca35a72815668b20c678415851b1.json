{"ast":null,"code":"import { FormGroup, Validators } from '@angular/forms';\nimport { Register } from './register.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../auth.service\";\nimport * as i3 from \"src/app/directives/custom-validator.directive\";\nimport * as i4 from \"@angular/common\";\nfunction RegisterComponent_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 26);\n    i0.ɵɵtext(1, \"First Name is invalid.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_span_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 26);\n    i0.ɵɵtext(1, \"Last Name is invalid.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_25_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 26);\n    i0.ɵɵtext(1, \" Email already taken. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_25_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 26);\n    i0.ɵɵtext(1, \"Email invalid.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, RegisterComponent_div_25_span_1_Template, 2, 0, \"span\", 10);\n    i0.ɵɵtemplate(2, RegisterComponent_div_25_span_2_Template, 2, 0, \"span\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.registerForm.touched && ctx_r2.registerForm.get(\"email\").errors && ctx_r2.registerForm.get(\"email\").errors.uniqueEmail);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.registerForm.get(\"email\").touched && ctx_r2.registerForm.get(\"email\").errors && !ctx_r2.registerForm.get(\"email\").errors.uniqueEmail);\n  }\n}\nfunction RegisterComponent_span_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 27);\n    i0.ɵɵtext(1, \"Password is invalid.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_span_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 28);\n    i0.ɵɵtext(1, \"Confirm Password is invalid.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_span_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 26);\n    i0.ɵɵtext(1, \"Passwords didn't match.\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class RegisterComponent {\n  constructor(fb, authService, customValidators) {\n    this.fb = fb;\n    this.authService = authService;\n    this.customValidators = customValidators;\n    this.registerForm = new FormGroup({});\n    this.passwordValidator = /^\\S*(?=\\S{8,})(?=\\S*\\d)(?=\\S*[A-Z])(?=\\S*[a-z])(?=\\S*[!@#$%^&*? ])\\S*$/;\n    this.nameValidator = /^[A-Z][a-zA-Z ]+$/;\n    this.showFNameValidators = false;\n    this.showLNameValidators = false;\n    this.showEmailValidators = false;\n    this.showPasswordValidators = false;\n    this.showConfirmPasswordValidators = false;\n  }\n  ngOnInit() {\n    this.registerForm = this.fb.group({\n      firstname: ['', {\n        validators: [Validators.required, Validators.pattern(this.nameValidator)],\n        updateOn: 'change'\n      }],\n      lastname: ['', {\n        validators: [Validators.required, Validators.pattern(this.nameValidator)],\n        updateOn: 'change'\n      }],\n      email: ['', {\n        validators: [Validators.required, Validators.email],\n        asyncValidators: [this.customValidators.uniqueEmailValidator()],\n        updateOn: 'blur'\n      }],\n      password: ['', {\n        validators: [Validators.required, Validators.pattern(this.passwordValidator)],\n        updateOn: 'change'\n      }],\n      confirmpassword: ['', {\n        validators: [Validators.required, Validators.pattern(this.passwordValidator)],\n        updateOn: 'change'\n      }]\n    });\n  }\n  onSubmit() {\n    let register = new Register(this.registerForm.get('firstname').value, this.registerForm.get('lastname').value, this.registerForm.get('email').value, this.registerForm.get('password').value);\n    this.authService.registerUser(this.registerForm.value);\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.CustomValidators));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 52,\n  vars: 8,\n  consts: [[3, \"formGroup\", \"submit\"], [1, \"row\"], [1, \"col-2\"], [1, \"col-8\"], [1, \"container\"], [1, \"row\", \"align-items-center\", \"m-2\"], [1, \"col-3\"], [\"for\", \"firstname\"], [1, \"col-6\"], [\"type\", \"text\", \"formControlName\", \"firstname\", 1, \"form-control\", 3, \"focus\", \"blur\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"lastname\"], [\"type\", \"text\", \"formControlName\", \"lastname\", 1, \"form-control\", 3, \"focus\", \"blur\"], [\"for\", \"email\"], [\"type\", \"text\", \"name\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\", 3, \"blur\", \"focus\"], [4, \"ngIf\"], [\"for\", \"password\"], [\"type\", \"password\", \"name\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"focus\", \"blur\"], [\"class\", \"text-danger\", \"field-validation-for\", \"password\", 4, \"ngIf\"], [\"for\", \"confirmpassword\"], [\"type\", \"password\", \"name\", \"confirmpassword\", \"id\", \"confirmpassword\", \"formControlName\", \"confirmpassword\", 1, \"form-control\", 3, \"focus\", \"blur\"], [\"class\", \"text-danger\", \"field-validation-for\", \"confirmpassword\", 4, \"ngIf\"], [1, \"col\"], [1, \"col\", 2, \"text-align-last\", \"center\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"m-2\", 3, \"disabled\"], [\"type\", \"reset\", 1, \"btn\", \"btn-secondary\", \"m-2\"], [1, \"text-danger\"], [\"field-validation-for\", \"password\", 1, \"text-danger\"], [\"field-validation-for\", \"confirmpassword\", 1, \"text-danger\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"submit\", function RegisterComponent_Template_form_submit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelement(2, \"div\", 2);\n      i0.ɵɵelementStart(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"div\", 6)(7, \"label\", 7);\n      i0.ɵɵtext(8, \"First Name\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"div\", 8)(10, \"input\", 9);\n      i0.ɵɵlistener(\"focus\", function RegisterComponent_Template_input_focus_10_listener() {\n        return ctx.showFNameValidators = false;\n      })(\"blur\", function RegisterComponent_Template_input_blur_10_listener() {\n        return ctx.showFNameValidators = true;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, RegisterComponent_span_11_Template, 2, 0, \"span\", 10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 5)(13, \"div\", 6)(14, \"label\", 11);\n      i0.ɵɵtext(15, \"Last Name\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"div\", 8)(17, \"input\", 12);\n      i0.ɵɵlistener(\"focus\", function RegisterComponent_Template_input_focus_17_listener() {\n        return ctx.showLNameValidators = false;\n      })(\"blur\", function RegisterComponent_Template_input_blur_17_listener() {\n        return ctx.showLNameValidators = true;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(18, RegisterComponent_span_18_Template, 2, 0, \"span\", 10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(19, \"div\", 5)(20, \"div\", 6)(21, \"label\", 13);\n      i0.ɵɵtext(22, \"Email\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(23, \"div\", 8)(24, \"input\", 14);\n      i0.ɵɵlistener(\"blur\", function RegisterComponent_Template_input_blur_24_listener() {\n        return ctx.showEmailValidators = true;\n      })(\"focus\", function RegisterComponent_Template_input_focus_24_listener() {\n        return ctx.showEmailValidators = false;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(25, RegisterComponent_div_25_Template, 3, 2, \"div\", 15);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(26, \"div\", 5)(27, \"div\", 6)(28, \"label\", 16);\n      i0.ɵɵtext(29, \"Password\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(30, \"div\", 8)(31, \"input\", 17);\n      i0.ɵɵlistener(\"focus\", function RegisterComponent_Template_input_focus_31_listener() {\n        return ctx.showPasswordValidators = false;\n      })(\"blur\", function RegisterComponent_Template_input_blur_31_listener() {\n        return ctx.showPasswordValidators = true;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(32, RegisterComponent_span_32_Template, 2, 0, \"span\", 18);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(33, \"div\", 5)(34, \"div\", 6)(35, \"label\", 19);\n      i0.ɵɵtext(36, \"Confirm Password\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(37, \"div\", 8)(38, \"input\", 20);\n      i0.ɵɵlistener(\"focus\", function RegisterComponent_Template_input_focus_38_listener() {\n        return ctx.showConfirmPasswordValidators = false;\n      })(\"blur\", function RegisterComponent_Template_input_blur_38_listener() {\n        return ctx.showConfirmPasswordValidators = true;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(39, RegisterComponent_span_39_Template, 2, 0, \"span\", 21);\n      i0.ɵɵtemplate(40, RegisterComponent_span_40_Template, 2, 0, \"span\", 10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(41, \"div\", 5)(42, \"div\", 22)(43, \"div\", 4)(44, \"div\", 1)(45, \"div\", 23)(46, \"div\")(47, \"button\", 24);\n      i0.ɵɵtext(48, \"Register\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(49, \"button\", 25);\n      i0.ɵɵtext(50, \"Reset\");\n      i0.ɵɵelementEnd()()()()()()()()();\n      i0.ɵɵelement(51, \"div\", 2);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"ngIf\", ctx.showFNameValidators && ctx.registerForm.get(\"firstname\").touched && !ctx.registerForm.get(\"firstname\").valid);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLNameValidators && ctx.registerForm.get(\"lastname\").touched && !ctx.registerForm.get(\"lastname\").valid);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.showEmailValidators);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.showPasswordValidators && ctx.registerForm.get(\"password\").touched && !ctx.registerForm.get(\"password\").valid);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.showConfirmPasswordValidators && ctx.registerForm.get(\"confirmpassword\").touched && !ctx.registerForm.get(\"confirmpassword\").valid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.registerForm.get(\"password\").valid && ctx.registerForm.get(\"confirmpassword\").valid && ctx.registerForm.get(\"password\").value !== ctx.registerForm.get(\"confirmpassword\").value);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"disabled\", !ctx.registerForm.valid || !ctx.showEmailValidators || ctx.registerForm.get(\"password\").value !== ctx.registerForm.get(\"confirmpassword\").value);\n    }\n  },\n  dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","Validators","Register","i0","RegisterComponent","constructor","fb","authService","customValidators","ngOnInit","registerForm","group","firstname","validators","required","pattern","nameValidator","updateOn","lastname","email","asyncValidators","uniqueEmailValidator","password","passwordValidator","confirmpassword","onSubmit","register","get","value","registerUser","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\mine\\projects\\dotnet-angular\\Notes\\Notes\\ClientApp\\src\\app\\components\\auth\\register\\register.component.ts","D:\\mine\\projects\\dotnet-angular\\Notes\\Notes\\ClientApp\\src\\app\\components\\auth\\register\\register.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomValidators } from 'src/app/directives/custom-validator.directive';\nimport { AuthService } from '../auth.service';\nimport { Register } from './register.model';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  registerForm: FormGroup = new FormGroup({});\n  passwordValidator: RegExp = /^\\S*(?=\\S{8,})(?=\\S*\\d)(?=\\S*[A-Z])(?=\\S*[a-z])(?=\\S*[!@#$%^&*? ])\\S*$/;\n  nameValidator: RegExp = /^[A-Z][a-zA-Z ]+$/;\n\n  showFNameValidators = false;\n  showLNameValidators = false;\n  showEmailValidators = false;\n  showPasswordValidators = false;\n  showConfirmPasswordValidators = false;\n\n  constructor(private fb: FormBuilder, private authService: AuthService, private customValidators: CustomValidators) { }\n\n  ngOnInit(): void {\n    this.registerForm = this.fb.group({\n      firstname: ['', {\n        validators: [Validators.required, Validators.pattern(this.nameValidator)],\n        updateOn: 'change'\n      }],\n      lastname: ['', {\n        validators: [Validators.required, Validators.pattern(this.nameValidator)],\n        updateOn: 'change'\n      }],\n      email: ['', {\n        validators: [Validators.required, Validators.email],\n        asyncValidators: [this.customValidators.uniqueEmailValidator()],\n        updateOn: 'blur'\n      }],\n      password: ['', {\n        validators: [Validators.required, Validators.pattern(this.passwordValidator)],\n        updateOn: 'change'\n      }],\n      confirmpassword: ['', {\n        validators: [Validators.required, Validators.pattern(this.passwordValidator)],\n        updateOn: 'change'\n      }]\n    })\n  }\n\n  onSubmit() {\n    let register = new Register(\n      this.registerForm.get('firstname')!.value,\n      this.registerForm.get('lastname')!.value,\n      this.registerForm.get('email')!.value,\n      this.registerForm.get('password')!.value\n    );\n    this.authService.registerUser(this.registerForm.value)\n  }\n}\n","<form [formGroup]=\"registerForm\" (submit)=\"onSubmit()\">\n    <div class=\"row\">\n        <div class=\"col-2\"></div>\n        <div class=\"col-8\">\n            <div class=\"container\">\n                <div class=\"row align-items-center m-2\">\n                    <div class=\"col-3\">\n                        <label for=\"firstname\">First Name</label>\n                    </div>\n                    <div class=\"col-6\">\n                        <input type=\"text\" class=\"form-control\"\n                            formControlName=\"firstname\"\n                            (focus)=\"showFNameValidators=false\"\n                            (blur)=\"showFNameValidators=true\"\n                        >\n                        <span \n                        class=\"text-danger\"\n                        *ngIf=\"showFNameValidators && registerForm.get('firstname')!.touched && !registerForm.get('firstname')!.valid \"\n                        >First Name is invalid.</span>\n                    </div>\n                </div>                \n                <div class=\"row align-items-center m-2\">\n                    <div class=\"col-3\">\n                        <label for=\"lastname\">Last Name</label>\n                    </div>\n                    <div class=\"col-6\">\n                        <input type=\"text\" class=\"form-control\"\n                            formControlName=\"lastname\"\n                            (focus)=\"showLNameValidators=false\"\n                            (blur)=\"showLNameValidators=true\"\n                        >\n                        <span \n                        class=\"text-danger\"\n                        *ngIf=\"showLNameValidators && registerForm.get('lastname')!.touched && !registerForm.get('lastname')!.valid \"\n                        >Last Name is invalid.</span>\n                    </div>\n                </div>\n                <div class=\"row align-items-center m-2\">\n                    <div class=\"col-3\">\n                        <label for=\"email\">Email</label>\n                    </div>\n                    <div class=\"col-6\">\n                        <input type=\"text\" name=\"email\" id=\"email\" class=\"form-control\"\n                            formControlName=\"email\" \n                            (blur)=\"showEmailValidators=true\"\n                            (focus)=\"showEmailValidators=false\"\n                        >\n                        <div *ngIf=\"showEmailValidators\">\n                            <span class=\"text-danger\"\n                                *ngIf=\"registerForm.touched\n                                && registerForm.get('email')!.errors \n                                && registerForm.get('email')!.errors!.uniqueEmail\n                                \"\n                            >\n                                Email already taken.\n                            </span>\n                            <span class=\"text-danger\" \n                            *ngIf=\"\n                                registerForm.get('email')!.touched\n                                && registerForm.get('email')!.errors \n                                && !registerForm.get('email')!.errors!.uniqueEmail\n                                \"\n                            >Email invalid.</span>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row align-items-center m-2\">\n                    <div class=\"col-3\">\n                        <label for=\"password\">Password</label>\n                    </div>\n                    <div class=\"col-6\">\n                        <input type=\"password\" name=\"password\" id=\"password\" class=\"form-control\"\n                            formControlName=\"password\"\n                            (focus)=\"showPasswordValidators=false\"\n                            (blur)=\"showPasswordValidators=true\"\n                        >\n                        <span \n                        class=\"text-danger\"\n                        field-validation-for=\"password\"\n                        *ngIf=\"showPasswordValidators && registerForm.get('password')!.touched && !registerForm.get('password')!.valid \"\n                        >Password is invalid.</span>\n                    </div>\n                </div>\n                <div class=\"row align-items-center m-2\">\n                    <div class=\"col-3\">\n                        <label for=\"confirmpassword\">Confirm Password</label>\n                    </div>\n                    <div class=\"col-6\">\n                        <input type=\"password\" name=\"confirmpassword\" id=\"confirmpassword\" class=\"form-control\"\n                            formControlName=\"confirmpassword\"\n                            (focus)=\"showConfirmPasswordValidators=false\"\n                            (blur)=\"showConfirmPasswordValidators=true\"\n                        >\n                        <span \n                        class=\"text-danger\" \n                        field-validation-for=\"confirmpassword\"\n                        *ngIf=\"showConfirmPasswordValidators && registerForm.get('confirmpassword')!.touched && !registerForm.get('confirmpassword')!.valid \"\n                        >Confirm Password is invalid.</span>\n                        <span \n                        class=\"text-danger\"\n                        *ngIf=\" registerForm.get('password')!.valid && registerForm.get('confirmpassword')!.valid && registerForm.get('password')!.value!==registerForm.get('confirmpassword')!.value\"\n                        >Passwords didn't match.</span>\n                    </div>\n                </div>\n                <div class=\"row align-items-center m-2\">\n                    <div class=\"col\">\n                        <div class=\"container\">\n                            <div class=\"row\">\n                                <div class=\"col\" style=\"text-align-last: center;\">\n                                    <div>                                    \n                                        <button class=\"btn btn-primary m-2\" \n                                                type=\"submit\"\n                                            [disabled]=\"!registerForm.valid || !showEmailValidators  || registerForm.get('password')!.value!==registerForm.get('confirmpassword')!.value\"\n                                            >Register</button>  \n                                        <button class=\"btn btn-secondary m-2\" type=\"reset\">Reset</button>                \n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>        \n        </div>\n        <div class=\"col-2\"></div>\n    </div>    \n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}