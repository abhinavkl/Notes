{"ast":null,"code":"import { FormGroup, Validators } from '@angular/forms';\nimport { ResponseMessage } from 'src/app/shared/response-message.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../auth.service\";\nimport * as i4 from \"@angular/common\";\nfunction LoginComponent_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 20);\n    i0.ɵɵtext(1, \" Email is invalid. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_span_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 21);\n    i0.ɵɵtext(1, \" Password is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class LoginComponent {\n  constructor(fb, router, authService) {\n    this.fb = fb;\n    this.router = router;\n    this.authService = authService;\n    this.responseMessage = ResponseMessage.default;\n    this.loginForm = new FormGroup({});\n    this.showEmailValidators = false;\n    this.showPasswordValidators = false;\n  }\n  ngOnInit() {\n    this.loginForm = this.fb.group({\n      email: ['', {\n        validators: [Validators.required, Validators.email],\n        updateOn: 'blur'\n      }],\n      password: ['', {\n        validators: [Validators.required],\n        updateOn: 'blur'\n      }]\n    });\n  }\n  onSubmit() {}\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AuthService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 36,\n  vars: 4,\n  consts: [[\"action\", \"post\", 3, \"formGroup\", \"submit\"], [1, \"row\"], [1, \"col-2\"], [1, \"col-8\"], [1, \"container\"], [1, \"row\", \"align-items-center\", \"m-2\"], [1, \"col-3\"], [\"for\", \"email\"], [1, \"col-6\"], [\"type\", \"text\", \"formControlName\", \"email\", 1, \"form-control\", 3, \"focus\", \"blur\"], [\"class\", \"text-danger\", \"field-validation-for\", \"email\", 4, \"ngIf\"], [\"for\", \"password\"], [\"type\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"focus\", \"blur\"], [\"class\", \"text-danger\", \"field-validation-for\", \"password\", 4, \"ngIf\"], [\"for\", \"rememberme\"], [\"type\", \"checkbox\", \"formControlName\", \"rememberme\", 1, \"form-check-input\"], [1, \"col\"], [1, \"col\", 2, \"text-align-last\", \"center\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"m-2\", 3, \"disabled\"], [\"type\", \"reset\", 1, \"btn\", \"btn-secondary\", \"m-2\"], [\"field-validation-for\", \"email\", 1, \"text-danger\"], [\"field-validation-for\", \"password\", 1, \"text-danger\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"submit\", function LoginComponent_Template_form_submit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelement(2, \"div\", 2);\n      i0.ɵɵelementStart(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"div\", 6)(7, \"label\", 7);\n      i0.ɵɵtext(8, \"Email\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"div\", 8)(10, \"input\", 9);\n      i0.ɵɵlistener(\"focus\", function LoginComponent_Template_input_focus_10_listener() {\n        return ctx.showEmailValidators = false;\n      })(\"blur\", function LoginComponent_Template_input_blur_10_listener() {\n        return ctx.showEmailValidators = true;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, LoginComponent_span_11_Template, 2, 0, \"span\", 10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 5)(13, \"div\", 6)(14, \"label\", 11);\n      i0.ɵɵtext(15, \"Password\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"div\", 8)(17, \"input\", 12);\n      i0.ɵɵlistener(\"focus\", function LoginComponent_Template_input_focus_17_listener() {\n        return ctx.showPasswordValidators = false;\n      })(\"blur\", function LoginComponent_Template_input_blur_17_listener() {\n        return ctx.showPasswordValidators = true;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(18, LoginComponent_span_18_Template, 2, 0, \"span\", 13);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(19, \"div\", 5)(20, \"div\", 6)(21, \"label\", 14);\n      i0.ɵɵtext(22, \"Remember Me\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(23, \"div\", 8);\n      i0.ɵɵelement(24, \"input\", 15);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(25, \"div\", 5)(26, \"div\", 16)(27, \"div\", 4)(28, \"div\", 1)(29, \"div\", 17)(30, \"div\")(31, \"button\", 18);\n      i0.ɵɵtext(32, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(33, \"button\", 19);\n      i0.ɵɵtext(34, \"Reset\");\n      i0.ɵɵelementEnd()()()()()()()()();\n      i0.ɵɵelement(35, \"div\", 2);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"ngIf\", ctx.showEmailValidators && !ctx.loginForm.get(\"email\").valid);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.showPasswordValidators && !ctx.loginForm.get(\"password\").valid);\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"disabled\", !ctx.loginForm.valid || ctx.showPasswordValidators || ctx.showEmailValidators);\n    }\n  },\n  dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.CheckboxControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAsBA,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAEnE,SAASC,eAAe,QAAQ,uCAAuC;;;;;;;;ICa/CC,gCAMC;IACDA,mCACA;IAAAA,iBAAO;;;;;IAePA,gCAIC;IACGA,uCACJ;IAAAA,iBAAO;;;ADlC/B,OAAM,MAAOC,cAAc;EAOzBC,YACUC,EAAc,EACdC,MAAa,EACbC,WAAuB;IAFvB,OAAE,GAAFF,EAAE;IACF,WAAM,GAANC,MAAM;IACN,gBAAW,GAAXC,WAAW;IATrB,oBAAe,GAACN,eAAe,CAACO,OAAO;IACvC,cAAS,GAAW,IAAIT,SAAS,CAAC,EAAE,CAAC;IAErC,wBAAmB,GAAG,KAAK;IAC3B,2BAAsB,GAAC,KAAK;EAM1B;EAGFU,QAAQ;IACN,IAAI,CAACC,SAAS,GAAC,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MAC3BC,KAAK,EAAE,CAAC,EAAE,EAAE;QACVC,UAAU,EAAE,CAACb,UAAU,CAACc,QAAQ,EAAEd,UAAU,CAACY,KAAK,CAAC;QACnDG,QAAQ,EAAE;OACX,CAAC;MACFC,QAAQ,EAAC,CAAC,EAAE,EAAC;QACXH,UAAU,EAAC,CAACb,UAAU,CAACc,QAAQ,CAAC;QAChCC,QAAQ,EAAC;OACV;KACF,CAAC;EACJ;EAEAE,QAAQ,IAER;;AA7BWd,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAe;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX3BpB,+BAAkE;MAApCA;QAAA,OAAUqB,cAAU;MAAA,EAAC;MAC/CrB,8BAAiB;MACbA,yBAAyB;MACzBA,8BAAmB;MAIgBA,qBAAK;MAAAA,iBAAQ;MAEpCA,8BAAmB;MAIfA;QAAA,iCAA6B,KAAK;MAAA,EAAC;QAAA,iCACP,IAAI;MAAA,EADG;MAHnCA,iBAKH;MACGA,oEAQO;MACXA,iBAAM;MAEVA,+BAAwC;MAEVA,yBAAQ;MAAAA,iBAAQ;MAE1CA,+BAAmB;MAKXA;QAAA,oCAAgC,KAAK;MAAA,EAAC;QAAA,oCACP,IAAI;MAAA,EADG;MAJ1CA,iBAMK;MACLA,oEAMO;MACXA,iBAAM;MAEVA,+BAAwC;MAERA,4BAAW;MAAAA,iBAAQ;MAE/CA,+BAAmB;MACfA,6BAA6E;MACjFA,iBAAM;MAEVA,+BAAwC;MAUfA,sBAAK;MAAAA,iBAAS;MACfA,mCAAmD;MAAAA,sBAAK;MAAAA,iBAAS;MASjGA,0BAAyB;MAC7BA,iBAAM;;;MA7EJA,yCAAuB;MAkBHA,gBAED;MAFCA,mFAED;MAqBIA,eAAiE;MAAjEA,yFAAiE;MAwBtDA,gBAA8E;MAA9EA,wGAA8E","names":["FormGroup","Validators","ResponseMessage","i0","LoginComponent","constructor","fb","router","authService","default","ngOnInit","loginForm","group","email","validators","required","updateOn","password","onSubmit","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\mine\\projects\\dotnet-angular\\Notes\\Notes\\ClientApp\\src\\app\\components\\auth\\login\\login.component.ts","D:\\mine\\projects\\dotnet-angular\\Notes\\Notes\\ClientApp\\src\\app\\components\\auth\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ResponseMessage } from 'src/app/shared/response-message.model';\nimport { AuthService } from '../auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  responseMessage=ResponseMessage.default;\n  loginForm:FormGroup=new FormGroup({})\n\n  showEmailValidators = false;\n  showPasswordValidators=false;\n\n  constructor(\n    private fb:FormBuilder,\n    private router:Router,\n    private authService:AuthService\n  ){}\n\n\n  ngOnInit(): void {\n    this.loginForm=this.fb.group({\n      email: ['', {\n        validators: [Validators.required, Validators.email],\n        updateOn: 'blur'\n      }],\n      password:['',{\n        validators:[Validators.required],\n        updateOn:'blur'\n      }]\n    })\n  }\n\n  onSubmit(){\n    \n  }\n\n}\n","<form [formGroup]=\"loginForm\" (submit)=\"onSubmit()\" action=\"post\">\n    <div class=\"row\">\n        <div class=\"col-2\"></div>\n        <div class=\"col-8\">\n            <div class=\"container\">\n                <div class=\"row align-items-center m-2\">\n                    <div class=\"col-3\">\n                        <label for=\"email\">Email</label>\n                    </div>\n                    <div class=\"col-6\">\n                        <input type=\"text\" \n                        formControlName=\"email\" \n                        class=\"form-control\"\n                        (focus)=\"showEmailValidators=false\"\n                        (blur)=\"showEmailValidators=true\"\n                    >\n                        <span\n                         class=\"text-danger\"\n                         *ngIf=\"\n                         showEmailValidators && !loginForm.get('email')!.valid\n                         \"\n                         field-validation-for=\"email\"\n                        >\n                        Email is invalid.\n                        </span>\n                    </div>\n                </div>\n                <div class=\"row align-items-center m-2\">\n                    <div class=\"col-3\">\n                        <label for=\"password\">Password</label>\n                    </div>\n                    <div class=\"col-6\">\n                        <input \n                            type=\"password\" \n                            formControlName=\"password\" \n                            class=\"form-control\"\n                            (focus)=\"showPasswordValidators=false\"\n                            (blur)=\"showPasswordValidators=true\"\n                            >\n                        <span \n                            class=\"text-danger\"\n                            *ngIf=\"showPasswordValidators && !loginForm.get('password')!.valid\"\n                            field-validation-for=\"password\"\n                        >\n                            Password is required.\n                        </span>\n                    </div>\n                </div>\n                <div class=\"row align-items-center m-2\">\n                    <div class=\"col-3\">\n                        <label for=\"rememberme\">Remember Me</label>\n                    </div>\n                    <div class=\"col-6\">\n                        <input type=\"checkbox\" formControlName=\"rememberme\" class=\"form-check-input\">\n                    </div>\n                </div>\n                <div class=\"row align-items-center m-2\">\n                    <div class=\"col\">\n                        <div class=\"container\">\n                            <div class=\"row\">\n                                <div class=\"col\" style=\"text-align-last: center;\">\n                                    <div>\n                                        <button \n                                        class=\"btn btn-primary m-2\" \n                                        type=\"submit\"\n                                        [disabled]=\"!loginForm.valid || showPasswordValidators || showEmailValidators\"\n                                        >Login</button>  \n                                        <button class=\"btn btn-secondary m-2\" type=\"reset\">Reset</button>                \n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>    \n            </div>\n        </div>\n        <div class=\"col-2\"></div>\n    </div>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}