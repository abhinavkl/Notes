{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../components/auth/auth.service\";\nexport class CustomValidators {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  uniqueEmailValidator() {\n    console.log('good');\n    return control => {\n      return this.authService.getUser(control.value).pipe(map(unique => {\n        return unique ? {\n          \"uniqueEmail\": true\n        } : null;\n      }));\n    };\n  }\n}\nCustomValidators.ɵfac = function CustomValidators_Factory(t) {\n  return new (t || CustomValidators)(i0.ɵɵinject(i1.AuthService));\n};\nCustomValidators.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CustomValidators,\n  factory: CustomValidators.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;AAItC,OAAM,MAAOC,gBAAgB;EAEzBC,YAAoBC,WAAuB;IAAvB,gBAAW,GAAXA,WAAW;EAAc;EAE7CC,oBAAoB;IAChBC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnB,OAAQC,OAAwB,IAA2E;MACvG,OAAO,IAAI,CAACJ,WAAW,CAACK,OAAO,CAACD,OAAO,CAACE,KAAK,CAAC,CAACC,IAAI,CAACV,GAAG,CAACW,MAAM,IAAE;QAC5D,OAAOA,MAAM,GAAC;UAAE,aAAa,EAAC;QAAI,CAAE,GAAC,IAAI;MAC7C,CAAC,CAAC,CAAC;IACP,CAAC;EACL;;AAXSV,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAW,SAAhBX,gBAAgB;EAAAY,YADL;AAAM","names":["map","CustomValidators","constructor","authService","uniqueEmailValidator","console","log","control","getUser","value","pipe","unique","factory","providedIn"],"sourceRoot":"","sources":["D:\\mine\\projects\\dotnet-angular\\Notes\\Notes\\ClientApp\\src\\app\\directives\\custom-validator.directive.ts"],"sourcesContent":["import { AbstractControl, ValidationErrors, AsyncValidatorFn } from '@angular/forms';\r\nimport { Directive, Injectable } from \"@angular/core\";\r\nimport { Observable, map } from 'rxjs';\r\nimport { AuthService } from '../components/auth/auth.service';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class CustomValidators{\r\n    \r\n    constructor(private authService:AuthService){}\r\n\r\n    uniqueEmailValidator():AsyncValidatorFn{\r\n        console.log('good')\r\n        return (control: AbstractControl): Promise<ValidationErrors | null> | Observable<ValidationErrors | null>=>{\r\n            return this.authService.getUser(control.value).pipe(map(unique=>{\r\n                return unique?{ \"uniqueEmail\":true }:null;\r\n            }))\r\n        }\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}