{"ast":null,"code":"import { FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../auth.service\";\nimport * as i3 from \"src/app/directives/custom-validator.directive\";\nimport * as i4 from \"@angular/common\";\nfunction RegisterComponent_div_11_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 22);\n    i0.ɵɵtext(1, \"Email invalid.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, RegisterComponent_div_11_span_1_Template, 2, 0, \"span\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.registerForm.get(\"email\").touched && !ctx_r0.registerForm.get(\"email\").valid);\n  }\n}\nfunction RegisterComponent_span_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵtext(1, \"Password is invalid.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_span_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 24);\n    i0.ɵɵtext(1, \"Confirm Password is invalid.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_span_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 22);\n    i0.ɵɵtext(1, \"Passwords didn't match.\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class RegisterComponent {\n  constructor(fb, authService, customValidators) {\n    this.fb = fb;\n    this.authService = authService;\n    this.customValidators = customValidators;\n    this.registerForm = new FormGroup({});\n    this.passwordValidator = /^\\S*(?=\\S{8,})(?=\\S*\\d)(?=\\S*[A-Z])(?=\\S*[a-z])(?=\\S*[!@#$%^&*? ])\\S*$/;\n    this.showEmailValidators = false;\n    this.showPasswordValidators = false;\n    this.showConfirmPasswordValidators = false;\n  }\n  ngOnInit() {\n    this.registerForm = this.fb.group({\n      email: ['', {\n        validators: [Validators.required, Validators.email],\n        asyncValidators: [this.customValidators.uniqueEmailValidator()],\n        updateOn: 'blur'\n      }],\n      password: ['', {\n        validators: [Validators.required, Validators.pattern(this.passwordValidator)],\n        updateOn: 'change'\n      }],\n      confirmpassword: ['', {\n        validators: [Validators.required, Validators.pattern(this.passwordValidator)],\n        updateOn: 'change'\n      }]\n    });\n  }\n  onSubmit() {\n    console.log(this.registerForm);\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.CustomValidators));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 38,\n  vars: 6,\n  consts: [[3, \"formGroup\", \"submit\"], [1, \"row\"], [1, \"col-2\"], [1, \"col-8\"], [1, \"container\"], [1, \"row\", \"align-items-center\", \"m-2\"], [1, \"col-3\"], [\"for\", \"email\"], [1, \"col-6\"], [\"type\", \"text\", \"name\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\", 3, \"blur\", \"focus\"], [4, \"ngIf\"], [\"for\", \"password\"], [\"type\", \"password\", \"name\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"focus\", \"blur\"], [\"class\", \"text-danger\", \"field-validation-for\", \"password\", 4, \"ngIf\"], [\"for\", \"confirmpassword\"], [\"type\", \"password\", \"name\", \"confirmpassword\", \"id\", \"confirmpassword\", \"formControlName\", \"confirmpassword\", 1, \"form-control\", 3, \"focus\", \"blur\"], [\"class\", \"text-danger\", \"field-validation-for\", \"confirmpassword\", 4, \"ngIf\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"col\"], [1, \"col\", 2, \"text-align-last\", \"center\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"m-2\", 3, \"disabled\"], [\"type\", \"reset\", 1, \"btn\", \"btn-secondary\", \"m-2\"], [1, \"text-danger\"], [\"field-validation-for\", \"password\", 1, \"text-danger\"], [\"field-validation-for\", \"confirmpassword\", 1, \"text-danger\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"submit\", function RegisterComponent_Template_form_submit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelement(2, \"div\", 2);\n      i0.ɵɵelementStart(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"div\", 6)(7, \"label\", 7);\n      i0.ɵɵtext(8, \"Email\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"div\", 8)(10, \"input\", 9);\n      i0.ɵɵlistener(\"blur\", function RegisterComponent_Template_input_blur_10_listener() {\n        return ctx.showEmailValidators = true;\n      })(\"focus\", function RegisterComponent_Template_input_focus_10_listener() {\n        return ctx.showEmailValidators = false;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, RegisterComponent_div_11_Template, 2, 1, \"div\", 10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 5)(13, \"div\", 6)(14, \"label\", 11);\n      i0.ɵɵtext(15, \"Password\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"div\", 8)(17, \"input\", 12);\n      i0.ɵɵlistener(\"focus\", function RegisterComponent_Template_input_focus_17_listener() {\n        return ctx.showPasswordValidators = false;\n      })(\"blur\", function RegisterComponent_Template_input_blur_17_listener() {\n        return ctx.showPasswordValidators = true;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(18, RegisterComponent_span_18_Template, 2, 0, \"span\", 13);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(19, \"div\", 5)(20, \"div\", 6)(21, \"label\", 14);\n      i0.ɵɵtext(22, \"Confirm Password\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(23, \"div\", 8)(24, \"input\", 15);\n      i0.ɵɵlistener(\"focus\", function RegisterComponent_Template_input_focus_24_listener() {\n        return ctx.showConfirmPasswordValidators = false;\n      })(\"blur\", function RegisterComponent_Template_input_blur_24_listener() {\n        return ctx.showConfirmPasswordValidators = true;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(25, RegisterComponent_span_25_Template, 2, 0, \"span\", 16);\n      i0.ɵɵtemplate(26, RegisterComponent_span_26_Template, 2, 0, \"span\", 17);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(27, \"div\", 5)(28, \"div\", 18)(29, \"div\", 4)(30, \"div\", 1)(31, \"div\", 19)(32, \"div\")(33, \"button\", 20);\n      i0.ɵɵtext(34, \"Register\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(35, \"button\", 21);\n      i0.ɵɵtext(36, \"Reset\");\n      i0.ɵɵelementEnd()()()()()()()()();\n      i0.ɵɵelement(37, \"div\", 2);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"ngIf\", ctx.showEmailValidators);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.showPasswordValidators && ctx.registerForm.get(\"password\").touched && !ctx.registerForm.get(\"password\").valid);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.showConfirmPasswordValidators && ctx.registerForm.get(\"confirmpassword\").touched && !ctx.registerForm.get(\"confirmpassword\").valid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.registerForm.get(\"password\").valid && ctx.registerForm.get(\"confirmpassword\").valid && ctx.registerForm.get(\"password\").value !== ctx.registerForm.get(\"confirmpassword\").value);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"disabled\", !ctx.registerForm.valid || ctx.registerForm.get(\"password\").value !== ctx.registerForm.get(\"confirmpassword\").value);\n    }\n  },\n  dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","Validators","i0","RegisterComponent","constructor","fb","authService","customValidators","ngOnInit","registerForm","group","email","validators","required","asyncValidators","uniqueEmailValidator","updateOn","password","pattern","passwordValidator","confirmpassword","onSubmit","console","log","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\mine\\projects\\dotnet-angular\\Notes\\Notes\\ClientApp\\src\\app\\components\\auth\\register\\register.component.ts","D:\\mine\\projects\\dotnet-angular\\Notes\\Notes\\ClientApp\\src\\app\\components\\auth\\register\\register.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup,Validators } from '@angular/forms';\nimport { CustomValidators } from 'src/app/directives/custom-validator.directive';\nimport { AuthService } from '../auth.service';\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit{\n  registerForm:FormGroup=new FormGroup({});\n  passwordValidator:RegExp=/^\\S*(?=\\S{8,})(?=\\S*\\d)(?=\\S*[A-Z])(?=\\S*[a-z])(?=\\S*[!@#$%^&*? ])\\S*$/;\n  \n  showEmailValidators=false;\n  showPasswordValidators=false;\n  showConfirmPasswordValidators=false;\n\n  constructor(private fb:FormBuilder,private authService:AuthService,private customValidators:CustomValidators){}\n  \n  ngOnInit(): void {    \n    this.registerForm=this.fb.group({\n      email:['',{\n        validators:[Validators.required,Validators.email],\n        asyncValidators:[this.customValidators.uniqueEmailValidator()],\n        updateOn:'blur'\n      }],\n      password:['',{\n        validators:[Validators.required,Validators.pattern(this.passwordValidator)],\n        updateOn:'change'\n      }],\n      confirmpassword:['',{\n        validators:[Validators.required,Validators.pattern(this.passwordValidator)],\n        updateOn:'change'\n      }]\n    })\n  }\n\n  onSubmit(){\n    console.log(this.registerForm)\n  }\n}\n","<form [formGroup]=\"registerForm\" (submit)=\"onSubmit()\">\n    <div class=\"row\">\n        <div class=\"col-2\"></div>\n        <div class=\"col-8\">\n            <div class=\"container\">\n                <div class=\"row align-items-center m-2\">\n                    <div class=\"col-3\">\n                        <label for=\"email\">Email</label>\n                    </div>\n                    <div class=\"col-6\">\n                        <input type=\"text\" name=\"email\" id=\"email\" class=\"form-control\"\n                            formControlName=\"email\" \n                            (blur)=\"showEmailValidators=true\"\n                            (focus)=\"showEmailValidators=false\"\n                        >\n                        <div *ngIf=\"showEmailValidators\">\n                            <span class=\"text-danger\" \n                            *ngIf=\"\n                                registerForm.get('email')!.touched &&  \n                                !registerForm.get('email')!.valid\n                                \"\n                            >Email invalid.</span>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row align-items-center m-2\">\n                    <div class=\"col-3\">\n                        <label for=\"password\">Password</label>\n                    </div>\n                    <div class=\"col-6\">\n                        <input type=\"password\" name=\"password\" id=\"password\" class=\"form-control\"\n                            formControlName=\"password\"\n                            (focus)=\"showPasswordValidators=false\"\n                            (blur)=\"showPasswordValidators=true\"\n                        >\n                        <span \n                        class=\"text-danger\"\n                        field-validation-for=\"password\"\n                        *ngIf=\"showPasswordValidators && registerForm.get('password')!.touched && !registerForm.get('password')!.valid \"\n                        >Password is invalid.</span>\n                    </div>\n                </div>\n                <div class=\"row align-items-center m-2\">\n                    <div class=\"col-3\">\n                        <label for=\"confirmpassword\">Confirm Password</label>\n                    </div>\n                    <div class=\"col-6\">\n                        <input type=\"password\" name=\"confirmpassword\" id=\"confirmpassword\" class=\"form-control\"\n                            formControlName=\"confirmpassword\"\n                            (focus)=\"showConfirmPasswordValidators=false\"\n                            (blur)=\"showConfirmPasswordValidators=true\"\n                        >\n                        <span \n                        class=\"text-danger\" \n                        field-validation-for=\"confirmpassword\"\n                        *ngIf=\"showConfirmPasswordValidators && registerForm.get('confirmpassword')!.touched && !registerForm.get('confirmpassword')!.valid \"\n                        >Confirm Password is invalid.</span>\n                        <span \n                        class=\"text-danger\"\n                        *ngIf=\" registerForm.get('password')!.valid && registerForm.get('confirmpassword')!.valid && registerForm.get('password')!.value!==registerForm.get('confirmpassword')!.value\"\n                        >Passwords didn't match.</span>\n                    </div>\n                </div>\n                <div class=\"row align-items-center m-2\">\n                    <div class=\"col\">\n                        <div class=\"container\">\n                            <div class=\"row\">\n                                <div class=\"col\" style=\"text-align-last: center;\">\n                                    <div>                                    \n                                        <button class=\"btn btn-primary m-2\" \n                                                type=\"submit\"\n                                            [disabled]=\"!registerForm.valid || registerForm.get('password')!.value!==registerForm.get('confirmpassword')!.value\"\n                                            >Register</button>  \n                                        <button class=\"btn btn-secondary m-2\" type=\"reset\">Reset</button>                \n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>        \n        </div>\n        <div class=\"col-2\"></div>\n    </div>    \n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}