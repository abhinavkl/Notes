{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nimport { Register } from './register.model';\nlet RegisterComponent = class RegisterComponent {\n  constructor(fb, router, authService, customValidators) {\n    this.fb = fb;\n    this.router = router;\n    this.authService = authService;\n    this.customValidators = customValidators;\n    this.registerForm = new FormGroup({});\n    this.passwordValidator = /^\\S*(?=\\S{8,})(?=\\S*\\d)(?=\\S*[A-Z])(?=\\S*[a-z])(?=\\S*[!@#$%^&*? ])\\S*$/;\n    this.nameValidator = /^[A-Z][a-zA-Z ]+$/;\n    this.showFNameValidators = false;\n    this.showLNameValidators = false;\n    this.showEmailValidators = false;\n    this.showPasswordValidators = false;\n    this.showConfirmPasswordValidators = false;\n  }\n  ngOnInit() {\n    this.registerForm = this.fb.group({\n      firstname: ['', {\n        validators: [Validators.required, Validators.pattern(this.nameValidator)],\n        updateOn: 'change'\n      }],\n      lastname: ['', {\n        validators: [Validators.required, Validators.pattern(this.nameValidator)],\n        updateOn: 'change'\n      }],\n      email: ['', {\n        validators: [Validators.required, Validators.email],\n        asyncValidators: [this.customValidators.uniqueEmailValidator()],\n        updateOn: 'blur'\n      }],\n      password: ['', {\n        validators: [Validators.required, Validators.pattern(this.passwordValidator)],\n        updateOn: 'change'\n      }],\n      confirmpassword: ['', {\n        validators: [Validators.required, Validators.pattern(this.passwordValidator)],\n        updateOn: 'change'\n      }]\n    });\n  }\n  onSubmit() {\n    let register = new Register(this.registerForm.get('firstname').value, this.registerForm.get('lastname').value, this.registerForm.get('email').value, this.registerForm.get('password').value, this.registerForm.get('confirmpassword').value);\n    console.log(register);\n    this.authService.registerUser(register).subscribe(data => {\n      const response = data;\n      if (response.statusCode === 1) {\n        this.router.navigate('/login');\n      } else {}\n    });\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":"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","names":["Component","FormGroup","Validators","Register","RegisterComponent","constructor","fb","router","authService","customValidators","ngOnInit","registerForm","group","firstname","validators","required","pattern","nameValidator","updateOn","lastname","email","asyncValidators","uniqueEmailValidator","password","passwordValidator","confirmpassword","onSubmit","register","get","value","console","log","registerUser","subscribe","data","response","statusCode","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\mine\\projects\\dotnet-angular\\Notes\\Notes\\ClientApp\\src\\app\\components\\auth\\register\\register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomValidators } from 'src/app/directives/custom-validator.directive';\nimport { AuthService } from '../auth.service';\nimport { Register } from './register.model';\nimport { ResponseMessage } from 'src/app/shared/response-message.model';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  registerForm: FormGroup = new FormGroup({});\n  passwordValidator: RegExp = /^\\S*(?=\\S{8,})(?=\\S*\\d)(?=\\S*[A-Z])(?=\\S*[a-z])(?=\\S*[!@#$%^&*? ])\\S*$/;\n  nameValidator: RegExp = /^[A-Z][a-zA-Z ]+$/;\n\n  showFNameValidators = false;\n  showLNameValidators = false;\n  showEmailValidators = false;\n  showPasswordValidators = false;\n  showConfirmPasswordValidators = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private router:Router,\n    private authService: AuthService, \n    private customValidators: CustomValidators) { }\n\n  ngOnInit(): void {\n    this.registerForm = this.fb.group({\n      firstname: ['', {\n        validators: [Validators.required, Validators.pattern(this.nameValidator)],\n        updateOn: 'change'\n      }],\n      lastname: ['', {\n        validators: [Validators.required, Validators.pattern(this.nameValidator)],\n        updateOn: 'change'\n      }],\n      email: ['', {\n        validators: [Validators.required, Validators.email],\n        asyncValidators: [this.customValidators.uniqueEmailValidator()],\n        updateOn: 'blur'\n      }],\n      password: ['', {\n        validators: [Validators.required, Validators.pattern(this.passwordValidator)],\n        updateOn: 'change'\n      }],\n      confirmpassword: ['', {\n        validators: [Validators.required, Validators.pattern(this.passwordValidator)],\n        updateOn: 'change'\n      }]\n    })\n  }\n\n  onSubmit() {\n    let register = new Register(\n      this.registerForm.get('firstname')!.value,\n      this.registerForm.get('lastname')!.value,\n      this.registerForm.get('email')!.value,\n      this.registerForm.get('password')!.value,\n      this.registerForm.get('confirmpassword')!.value\n    );\n    console.log(register)\n    this.authService.registerUser(register).subscribe(data=>{\n      const response=data as ResponseMessage;\n      if(response.statusCode===1){\n        this.router.navigate('/login')\n      }\n      else{\n\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}