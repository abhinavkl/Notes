{"ast":null,"code":"import { UserDetails } from '../auth/user.model';\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = '';\n    this.isAuthenticated = false;\n    this.userDetails = UserDetails.default;\n    this.timer = undefined;\n    this.baseUrl = baseUrl;\n  }\n  getUser(email) {\n    return this.http.get(this.baseUrl + 'register?email=' + email);\n  }\n  registerUser(register) {\n    return this.http.post(this.baseUrl + 'register', register);\n  }\n  loginUser(login) {\n    return this.http.post(this.baseUrl + 'login', login);\n  }\n  logout() {\n    return this.http.post(this.baseUrl + 'logout', {});\n  }\n  getUserSession() {\n    return this.http.get(this.baseUrl + 'login');\n  }\n  setIsAuthenticate(value) {\n    this.isAuthenticated = value;\n    if (value) {\n      this.timer = setTimeout(() => {\n        this.logout();\n        this.setIsAuthenticate(false);\n        this.clearSessionTimer();\n      }, environment.SessionTimeMS);\n    }\n  }\n  setSessionTimer(timeleft) {\n    this.timer = setTimeout(() => {\n      this.logout();\n      this.setIsAuthenticate(false);\n      this.clearSessionTimer();\n    }, timeleft * 1000);\n  }\n  clearSessionTimer() {\n    clearTimeout(this.timer);\n  }\n  clearSessionTimers() {\n    let id = setTimeout(() => {}, 0);\n    while (id--) {\n      clearTimeout(id);\n    }\n  }\n  get authenticated() {\n    return this.isAuthenticated;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAMA,SAASA,WAAW,QAAqB,oBAAoB;AAC7D,SAASC,WAAW,QAAQ,8BAA8B;;;AAG1D,OAAM,MAAOC,WAAW;EAMpBC,YAAoBC,IAAe,EAAqBC,OAAe;IAAnD,SAAI,GAAJD,IAAI;IALxB,YAAO,GAAC,EAAE;IACF,oBAAe,GAAC,KAAK;IACtB,gBAAW,GAACJ,WAAW,CAACM,OAAO;IAC9B,UAAK,GAAgCC,SAAS;IAIlD,IAAI,CAACF,OAAO,GAACA,OAAO;EACxB;EAEAG,OAAO,CAACC,KAAY;IAChB,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAU,IAAI,CAACL,OAAO,GAAC,iBAAiB,GAACI,KAAK,CAAC;EACvE;EAEAE,YAAY,CAACC,QAAiB;IAC1B,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAkB,IAAI,CAACR,OAAO,GAAC,UAAU,EAACO,QAAQ,CAAC;EAC5E;EAEAE,SAAS,CAACC,KAAW;IACjB,OAAO,IAAI,CAACX,IAAI,CAACS,IAAI,CAAkB,IAAI,CAACR,OAAO,GAAC,OAAO,EAACU,KAAK,CAAC;EACtE;EAEAC,MAAM;IACF,OAAO,IAAI,CAACZ,IAAI,CAACS,IAAI,CAAC,IAAI,CAACR,OAAO,GAAC,QAAQ,EAAC,EAAE,CAAC;EACnD;EAEAY,cAAc;IACV,OAAO,IAAI,CAACb,IAAI,CAACM,GAAG,CAAc,IAAI,CAACL,OAAO,GAAC,OAAO,CAAC;EAC3D;EAEAa,iBAAiB,CAACC,KAAa;IAC3B,IAAI,CAACC,eAAe,GAACD,KAAK;IAC1B,IAAGA,KAAK,EAAC;MACL,IAAI,CAACE,KAAK,GAACC,UAAU,CAAC,MAAI;QACtB,IAAI,CAACN,MAAM,EAAE;QACb,IAAI,CAACE,iBAAiB,CAAC,KAAK,CAAC;QAC7B,IAAI,CAACK,iBAAiB,EAAE;MAC5B,CAAC,EAACtB,WAAW,CAACuB,aAAa,CAAC;;EAEpC;EAEAC,eAAe,CAACC,QAAe;IAC3B,IAAI,CAACL,KAAK,GAACC,UAAU,CAAC,MAAI;MACtB,IAAI,CAACN,MAAM,EAAE;MACb,IAAI,CAACE,iBAAiB,CAAC,KAAK,CAAC;MAC7B,IAAI,CAACK,iBAAiB,EAAE;IAC5B,CAAC,EAACG,QAAQ,GAAC,IAAI,CAAC;EACpB;EAEAH,iBAAiB;IACbI,YAAY,CAAC,IAAI,CAACN,KAAK,CAAC;EAC5B;EAEAO,kBAAkB;IACd,IAAIC,EAAE,GAACP,UAAU,CAAC,MAAI,CAAC,CAAC,EAAC,CAAC,CAAC;IAC3B,OAAMO,EAAE,EAAE,EAAC;MACPF,YAAY,CAACE,EAAE,CAAC;;EAExB;EAEA,IAAIC,aAAa;IACb,OAAO,IAAI,CAACV,eAAe;EAC/B;;AA/DSlB,WAAW;mBAAXA,WAAW,0CAMwB,UAAU;AAAA;AAN7CA,WAAW;SAAXA,WAAW;EAAA6B,SAAX7B,WAAW;EAAA8B,YADA;AAAM","names":["UserDetails","environment","AuthService","constructor","http","baseUrl","default","undefined","getUser","email","get","registerUser","register","post","loginUser","login","logout","getUserSession","setIsAuthenticate","value","isAuthenticated","timer","setTimeout","clearSessionTimer","SessionTimeMS","setSessionTimer","timeleft","clearTimeout","clearSessionTimers","id","authenticated","factory","providedIn"],"sourceRoot":"","sources":["D:\\mine\\projects\\dotnet-angular\\Notes\\Notes\\ClientApp\\src\\app\\components\\auth\\auth.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { ServerModule } from \"@angular/platform-server\";\r\nimport { Register } from \"./register/register.model\";\r\nimport { Login } from \"./login/login.model\";\r\nimport { ResponseMessage } from \"src/app/shared/response-message.model\";\r\nimport { UserDetails, UserSession } from '../auth/user.model';\r\nimport { environment } from \"src/environments/environment\";\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class AuthService{\r\n    baseUrl='';\r\n    private isAuthenticated=false;\r\n    public userDetails=UserDetails.default;\r\n    private timer?:ReturnType<typeof setTimeout>=undefined;\r\n\r\n    constructor(private http:HttpClient,@Inject('BASE_URL') baseUrl: string)\r\n    {\r\n        this.baseUrl=baseUrl;\r\n    }\r\n\r\n    getUser(email:string){\r\n        return this.http.get<boolean>(this.baseUrl+'register?email='+email)\r\n    }\r\n\r\n    registerUser(register:Register){\r\n        return this.http.post<ResponseMessage>(this.baseUrl+'register',register)\r\n    }\r\n\r\n    loginUser(login:Login){\r\n        return this.http.post<ResponseMessage>(this.baseUrl+'login',login)\r\n    }\r\n\r\n    logout(){\r\n        return this.http.post(this.baseUrl+'logout',{})\r\n    }\r\n\r\n    getUserSession(){\r\n        return this.http.get<UserSession>(this.baseUrl+'login')\r\n    }\r\n\r\n    setIsAuthenticate(value:boolean){\r\n        this.isAuthenticated=value;\r\n        if(value){\r\n            this.timer=setTimeout(()=>{\r\n                this.logout()\r\n                this.setIsAuthenticate(false)\r\n                this.clearSessionTimer()\r\n            },environment.SessionTimeMS)    \r\n        }\r\n    }\r\n\r\n    setSessionTimer(timeleft:number){\r\n        this.timer=setTimeout(()=>{\r\n            this.logout()\r\n            this.setIsAuthenticate(false)\r\n            this.clearSessionTimer()\r\n        },timeleft*1000)\r\n    }\r\n\r\n    clearSessionTimer(){\r\n        clearTimeout(this.timer)\r\n    }\r\n\r\n    clearSessionTimers(){\r\n        let id=setTimeout(()=>{},0)\r\n        while(id--){\r\n            clearTimeout(id)\r\n        }\r\n    }\r\n\r\n    get authenticated(){\r\n        return this.isAuthenticated;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}