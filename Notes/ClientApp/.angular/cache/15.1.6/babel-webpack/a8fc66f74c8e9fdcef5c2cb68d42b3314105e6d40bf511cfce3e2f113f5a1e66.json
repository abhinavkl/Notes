{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = '';\n    this.baseUrl = baseUrl;\n  }\n  getUser(email) {\n    return this.http.get(this.baseUrl + 'register?email=' + email);\n  }\n  registerUser(register) {\n    return this.http.post(this.baseUrl + 'register', register);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,WAAW;EAEpBC,YAAoBC,IAAe,EAAqBC,OAAe;IAAnD,SAAI,GAAJD,IAAI;IADxB,YAAO,GAAC,EAAE;IAGN,IAAI,CAACC,OAAO,GAACA,OAAO;EACxB;EAEAC,OAAO,CAACC,KAAY;IAChB,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAU,IAAI,CAACH,OAAO,GAAC,iBAAiB,GAACE,KAAK,CAAC;EACvE;EAEAE,YAAY,CAACC,QAAiB;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,IAAI,CAACN,OAAO,GAAC,UAAU,EAACK,QAAQ,CAAC;EAC3D;;AAbSR,WAAW;mBAAXA,WAAW,0CAEwB,UAAU;AAAA;AAF7CA,WAAW;SAAXA,WAAW;EAAAU,SAAXV,WAAW;EAAAW,YADA;AAAM","names":["AuthService","constructor","http","baseUrl","getUser","email","get","registerUser","register","post","factory","providedIn"],"sourceRoot":"","sources":["D:\\mine\\projects\\dotnet-angular\\Notes\\Notes\\ClientApp\\src\\app\\components\\auth\\auth.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { ServerModule } from \"@angular/platform-server\";\r\nimport { Register } from \"./register/register.model\";\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class AuthService{\r\n    baseUrl='';\r\n    constructor(private http:HttpClient,@Inject('BASE_URL') baseUrl: string)\r\n    {\r\n        this.baseUrl=baseUrl;\r\n    }\r\n\r\n    getUser(email:string){\r\n        return this.http.get<boolean>(this.baseUrl+'register?email='+email)\r\n    }\r\n\r\n    registerUser(register:Register){\r\n        return this.http.post(this.baseUrl+'register',register)\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}